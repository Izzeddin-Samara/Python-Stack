# Countdown function
def countdown(n):
    return list(range(n, -1, -1))
print(countdown(5))  

# Print and Return function
def print_and_return(lst):
    print(lst[0])  # Print the first value
    return lst[1]  # Return the second value
result = print_and_return([1, 2])
print(result)  

# First PLUS length function
def first_plus_length(lst):
    return lst[0] + len(lst)
result = first_plus_length([1, 2, 3, 4, 5])
print(result)  

# Values Greater than Second 
def values_greater_than_second(lst):
    if len(lst) < 2:
        return False
    
    second_value = lst[1]
    new_list = [x for x in lst if x > second_value]
    
    print(len(new_list))
    return new_list
result1 = values_greater_than_second([5, 2, 3, 2, 1, 4])
print(result1)  # Output: 3, [5, 3, 4]

result2 = values_greater_than_second([3])
print(result2)  

# This Length, That Value 
def length_and_value(size, value):
    return [value] * size
result1 = length_and_value(4, 7)
print(result1)  

result2 = length_and_value(6, 2)
print(result2)  
# Countdown function
def countdown(n):
    return list(range(n, -1, -1))
print(countdown(5))  

# Print and Return Function
def print_and_return(lst):
    print(lst[0])  # Print the first value
    return lst[1]  # Return the second value
result = print_and_return([1, 2])
print(result)  

# First PLUS length Function
def first_plus_length(lst):
    return lst[0] + len(lst)
result = first_plus_length([1, 2, 3, 4, 5])
print(result)  

# Values Greater than Second 
def values_greater_than_second(lst):
    if len(lst) < 2:
        return False
    
    second_value = lst[1]
    new_list = [x for x in lst if x > second_value]
    
    print(len(new_list))
    return new_list
result1 = values_greater_than_second([5, 2, 3, 2, 1, 4])
print(result1)  # Output: 3, [5, 3, 4]

result2 = values_greater_than_second([3])
print(result2)  

# This Length, That Value 
def length_and_value(size, value):
    return [value] * size
result1 = length_and_value(4, 7)
print(result1)  

result2 = length_and_value(6, 2)
print(result2)  

